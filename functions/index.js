/* eslint-disable max-len */

const {onDocumentCreated} = require("firebase-functions/v2/firestore");
const {Storage} = require("@google-cloud/storage");
const {setGlobalOptions} = require("firebase-functions/v2/options");
const {initializeApp} = require("firebase-admin/app");
const nodemailer = require("nodemailer");
const {setTimeout} = require("timers/promises");

setGlobalOptions({maxInstances: 10});
initializeApp();


const storage = new Storage();
const bucket = storage.bucket("pyro-dev-e424e.appspot.com");

const email = "email";
const appPassword = "password";

const endpoint = "https://api.advicement.io/v1/templates/pub-tex-to-pdf-with-pdflatex-v1/compile";
const apiKey = "apiKey";

// .data refers to the data in the field which leads to filtering the ticketID
exports
    .onUserCreate = onDocumentCreated("tickets/{ticketID}", async (event) => {
      const ticket = event.data.data();
      const ticketID = event.params.ticketID;
      console.log("Document Created in Firebase: ", ticketID);
      // 'ticket' contains the values inside the new document
      // creates a file on GC storage named the ticketID.tex
      const file = bucket.file(`tickets/${ticketID}.pdf`);

      const transporter = nodemailer.createTransport({ // Setting email settings
        service: "Gmail",
        auth: {
          user: email,
          pass: appPassword,
        },
      });


      // grabs the template from the data payload and places it into memory
      const template = await getTemplate(ticket.template.link);
      const tableRows = ticket.purchaseTable
          .map((cell) => {
            // eslint-disable-next-line max-len
            return `${cell.name} & \\textsf{${cell.quantity.toFixed(2)}} & \\textsf{\\$${cell.price.toFixed(2)}} & \\textsf{${cell.tax.toFixed(2)}{\\%}} & \\textsf{\\$${cell.amount.toFixed(2)}} \\\\ \\hline`;
          }).join("\n");
      const tex = template
          .replace(/%%% INSERT_TABLE_ROWS_HERE %%%/g, tableRows);


      const latex = compileLatex(tex);
      const response = await getPostData(latex, ticketID);
      const buffer = await Buffer.from(response, "binary");
      file.save(buffer);
      sendEmail(buffer, ticket, transporter);
    });


// eslint-disable-next-line require-jsdoc, no-unused-vars
function sendEmail(buffer, ticket, transporter) {
  const mailOptions = {
    from: email,
    to: ticket.email,
    subject: ("Pyro Compilation Email #" + ticket.order.orderID),
    text: (`Dear ${ticket.order.employeeID},\nWe would like to thank you for your recent purchase at ${ticket.clientInfo.name}. Your dedication to helping us achieve our mission means a lot to us here at ${ticket.clientInfo.name}.\nWe are committed to delivering the best experience you could possibly have.\nIf you have any questions, feel free to contact us at ${ticket.clientInfo.website} and we would be thrilled to assist you.\nOnce again, thank you for your purchase and support. We look forward to serving you in the future.\nBest regards\n${ticket.order.employeeID}}\n${ticket.clientInfo.name}\nGenerated by Project Pyro`),
    // eslint-disable-next-line no-useless-escape
    html: `<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Thank You for Your Recent Purchase</title></head><body><div id=\"container\" style=\" border-radius: 25px; background: #FF6600; padding: 20px; max-width: 500px; margin: 0 auto; box-sizing: border-box; position: relative;\"><amp-img src=\"your-logo.png\" width=\"100\" height=\"100\" style=\"max-width: 100%;\"></amp-img><h1 style=\"color: #fff; text-align: center\"> Thank You for Your Purchase </h1><div><div style=\"background-color: #fff; padding: 20px; border-radius: 5px;\"><p style=\"color: #000\">Dear ${ticket.order.employeeID},</p><p style=\"color: #000\">We would like to thank you for your recent purchase at ${ticket.clientInfo.name}. Your dedication to helping us achieve our mission means a lot to us here at ${ticket.clientInfo.name}.</p><p style=\"color: #000\">We are committed to delivering the best experience you could possibly have.</p><p style=\"color: #000\">If you have any questions, feel free to contact us at <a href=\"mailto:${ticket.clientInfo.website}\">${ticket.clientInfo.website}</a>, and we would be thrilled to assist you.</p><p style=\"color: #000\">Once again, thank you for your purchase and support. We look forward to serving you in the future.</p><p style=\"color: #000\">Best regards,<br>${ticket.order.employeeID}<br>[Your Title]<br>[Your Company Name]</p><p> Generated by <a href=\"\">Project Pyro</a> </p></div></div></div></body></html>`, // html body
    amp: `<!DOCTYPE html>
    <html âš¡ lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Thank You for Your Recent Purchase</title>
    </head>
    <body>
        <div id="container" style=" border-radius: 25px; background: #FF6600; padding: 20px; max-width: 500px; margin: 0 auto; box-sizing: border-box; position: relative;">
            <amp-img src="your-logo.png" width="100" height="100" style="max-width: 100%;"></amp-img>
            <h1 style="color: #fff; text-align: center"> Thank You for Your Purchase </h1>
            <div>
                <div style="background-color: #fff; padding: 20px; border-radius: 5px;">
                <p style="color: #000">Dear ${ticket.order.employeeID},</p>
                <p style="color: #000">We would like to thank you for your recent purchase at ${ticket.clientInfo.name}. Your dedication to helping us achieve our mission means a lot to us here at ${ticket.clientInfo.name}.</p>
                <p style="color: #000">We are committed to delivering the best experience you could possibly have.</p>
                <p style="color: #000">If you have any questions, feel free to contact us at <a href="mailto:${ticket.clientInfo.website}">${ticket.clientInfo.website}</a>, and we would be thrilled to assist you.</p>
                <p style="color: #000">Once again, thank you for your purchase and support. We look forward to serving you in the future.</p>
                <p style="color: #000">Best regards,<br>${ticket.order.employeeID}<br>[Your Title]<br>[Your Company Name]</p>
                <p> Generated by <a href="">Project Pyro</a> </p>
            </div>
            </div>
        </div>
    </body>
    </html>
    `,
    attachments: [
      {
        filename: `invoice_${ticket.order.orderID}.pdf`,
        content: buffer,
      },
    ],
  };
  transporter.sendMail(mailOptions);
  console.log("Email Sent Successfully!");
}

// eslint-disable-next-line require-jsdoc
async function getTemplate(filename) {
  const content = await bucket.file(filename).download()
      .then((data) => {
        console.log("Template Acquired");
        return data.toString("utf8");
      });
  return content;
}

/**
 * Formatting latex data into a JSON object
 * @param {string} latex
 * @return {object}
 */
function compileLatex(latex) {
  const output = {};
  output["texFileContent"] = latex;
  return output;
}

/**
 * Compiling latex
 * @param {string} body
 * @param {string} docID
 * @return {arrayBuffer}
 */
async function getPostData(body, docID) {
  const header = {
    "Adv-Security-Token": apiKey,
    "Content-Type": "application/json",
  };
  const options = {
    method: "POST",
    body: JSON.stringify(body),
    headers: header,
  };
  const response = await fetch(endpoint, options);
  const data = await response.json();
  const status = data["documentStatusUrl"];

  let statusResponse = await fetch(status);
  let statusVal = await statusResponse.json();

  let i; // index for "for-loop"
  for (i=0; statusVal["statusDescription"] === "document processing" && i < 10; i++) {
    await setTimeout(5000);
    statusResponse = await fetch(status);
    statusVal = await statusResponse.json();
    console.log(statusVal);
  }
  if (i >= 10) throw new Error("Dynamic Docs is taking too long");
  const pdf = statusVal["documentUrl"];
  if (!pdf) throw new Error("Dynamic Docs didnt include a pdf in the response");
  const pdfResponse = await fetch(pdf);
  return await pdfResponse.arrayBuffer();
}
